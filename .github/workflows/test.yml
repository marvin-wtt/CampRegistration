name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

permissions:
  contents: read

jobs:
  verify-migrations:
    runs-on: ubuntu-24.04
    if: github.event.pull_request.draft == false

    services:
      mysql:
        image: mysql:9
        env:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 3
        ports:
          - 3306:3306

    env:
      DATABASE_URL: mysql://root:admin123@localhost:3306/test_db

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install prisma
        run: npm i prisma

      - name: Verify migrations
        run: >
          npx prisma migrate diff \
            --exit-code \
            --from-migrations backend/prisma/migrations \
            --to-schema-datamodel backend/prisma/schema.prisma \
            --shadow-database-url $DATABASE_URL

  test-backend:
    runs-on: ubuntu-24.04
    if: github.event.pull_request.draft == false

    strategy:
      matrix:
        node: [ 22, 24 ]

    services:
      mariadb:
        image: mariadb:10.5.27
        env:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 3
        ports:
          - 3306:3306

    env:
      APP_PORT: 3000
      APP_URL: http://localhost:3000
      APP_NAME: Test App
      DATABASE_URL: mysql://root:admin123@localhost:3306/test_db
      TMP_DIR: tests/tmp/storage/tmp/
      UPLOAD_DIR: tests/tmp/storage/uploads/
      STORAGE_LOCATION: local
      JWT_SECRET: oxcch29nu7OKSZ2Wia8U7Y/4TiCqd9lWpIm/skZOpVM=
      CSRF_SECRET: pwXh922dSwF1tjaDmpwhrWZjNbu771PCgv70cRc37so=
      SMTP_HOST: localhost
      SMTP_PORT: 587
      SMTP_USERNAME: user
      SMTP_PASSWORD: password
      EMAIL_FROM: noreply@yourapp.com
      EMAIL_REPLY_TO: noreply@yourapp.com
      EMAIL_ADMIN: admin@yourapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci

      - name: Build common
        run: npm run build --workspace common

      - name: Build backend
        run: npm run build -workspace backend

      - name: Build mails
        run:  npm run dev:views -workspace backend

      - name: Migrate test database
        run: npm run migrate --workspace backend

      - name: Test workspaces
        run: npm run test --workspace backend

  test-frontend:
    runs-on: ubuntu-24.04
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install dependencies
        run: npm ci

      - name: Build common
        run: npm run build --workspace common

      - name: Test workspaces
        run: npm run test --workspace frontend

  test-e2e:
    runs-on: ubuntu-24.04
    if: github.event.pull_request.draft == false

    strategy:
      matrix:
        browser: [chrome, firefox]
        node: [22]

    services:
      mariadb:
        image: mariadb:10.5.27
        env:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 3
        ports:
          - 3306:3306
      maildev:
        image: maildev/maildev
        env:
          MAILDEV_SMTP_PORT: 1025
          MAILDEV_WEB_PORT: 1081
          MAILDEV_INCOMING_USER: user
          MAILDEV_INCOMING_PASS: password
        ports:
          - 1025:1025
          - 1081:1081

    env:
      APP_PORT: 3001
      APP_URL: http://localhost:3001
      APP_NAME: Test App
      DATABASE_URL: mysql://root:admin123@localhost:3306/test_db
      TMP_DIR: tests/tmp/storage/tmp/
      UPLOAD_DIR: tests/tmp/storage/uploads/
      STORAGE_LOCATION: local
      JWT_SECRET: oxcch29nu7OKSZ2Wia8U7Y/4TiCqd9lWpIm/skZOpVM=
      CSRF_SECRET: pwXh922dSwF1tjaDmpwhrWZjNbu771PCgv70cRc37so=
      SMTP_HOST: localhost
      SMTP_PORT: 1025
      SMTP_USERNAME: user
      SMTP_PASSWORD: password
      SMTP_SECURE: false
      EMAIL_FROM: noreply@yourapp.com
      EMAIL_REPLY_TO: noreply@yourapp.com
      EMAIL_ADMIN: admin@yourapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          project: ./e2e
          build: npm run build-and-migrate
          start: npm run production -w backend
          wait-on: 'http://localhost:3001'
          browser: ${{ matrix.browser }}
          # Records to Cypress Cloud
          # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
          record: true

        env:
          # For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
          # in GitHub repo → Settings → Secrets → Actions
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to detect new build vs re-run build
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

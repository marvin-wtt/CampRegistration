generator client {
  provider = "prisma-client-js"
}

// TODO This is a workaround due to https://github.com/prisma/prisma/issues/3219
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @unique(map: "users_id_unique") @db.Char(26)
  name          String        @db.VarChar(255)
  email         String        @unique(map: "users_email_unique") @db.VarChar(255)
  emailVerified Boolean       @default(false) @map("email_verified")
  password      String        @db.VarChar(255)
  role          Role          @default(USER)
  locale        String        @default("en-US") @db.VarChar(5)
  createdAt     DateTime?     @default(now()) @map("created_at")
  updatedAt     DateTime?     @updatedAt @map("updated_at")
  camps         CampManager[]
  tokens        Token[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Camp {
  id              String         @id @unique(map: "camps_id_unique") @db.Char(26)
  active          Boolean
  public          Boolean
  /// ![string[]]
  countries       Json           @db.Json
  /// [StringOrTranslation]
  name            Json           @db.Json
  /// [StringOrTranslation]
  organization    Json           @db.Json
  /// [StringOrTranslation]
  contactEmail    Json           @map("contact_email") @db.Json
  /// [NumberOrTranslation]
  maxParticipants Json           @map("max_participants") @db.Json
  minAge          Int            @map("min_age") @db.UnsignedInt
  maxAge          Int            @map("max_age") @db.UnsignedInt
  startAt         DateTime       @map("start_at") @db.DateTime(0)
  endAt           DateTime       @map("end_at") @db.DateTime(0)
  price           Float
  /// [StringOrTranslation]
  location        Json?          @db.Json
  /// [GenericObject]
  form            Json           @db.Json
  /// [GenericObject]
  themes          Json           @default("{}") @db.Json
  createdAt       DateTime?      @default(now()) @map("created_at")
  updatedAt       DateTime?      @updatedAt @map("updated_at")
  campManager     CampManager[]
  registrations   Registration[]
  rooms           Room[]
  templates       Template[]
  files           File[]

  @@map("camps")
}

model CampManager {
  id           String      @id @unique(map: "camp_managers_id_unique") @db.Char(26)
  campId       String      @map("camp_id") @db.Char(26)
  userId       String?     @map("user_id") @db.Char(26)
  invitationId String?     @map("invitation_id") @db.Char(26)
  camp         Camp        @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "camp_managers_camp_id_foreign")
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "camp_managers_user_id_foreign")
  invitation   Invitation? @relation(fields: [invitationId], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "camp_managers_invitation_id_foreign")

  @@index([campId], map: "camp_managers_camp_id_foreign")
  @@index([userId], map: "camp_managers_user_id_foreign")
  @@index([invitationId], map: "camp_manager_invitation_id_foreign")
  @@map("camp_managers")
}

model Invitation {
  id          String        @id @unique(map: "invitations_id_unique") @db.Char(26)
  email       String        @db.VarChar(255)
  campManager CampManager[]

  @@map("camp_manager_invitations")
}

model Registration {
  id          String    @id @unique(map: "registrations_id_unique") @db.Char(26)
  campId      String?   @map("camp_id") @db.Char(26)
  /// [GenericObject]
  data        Json      @db.Json
  waitingList Boolean   @default(true)
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  camp        Camp?     @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "registrations_camp_id_foreign")
  /// [RegistrationCampData]
  campData    Json      @default("{}") @db.Json
  bed         Bed?
  files       File[]

  @@map("registrations")
}

model Room {
  id       String @id @unique(map: "rooms_id_unique") @db.Char(26)
  campId   String @map("camp_id") @db.Char(26)
  /// [StringOrTranslation]
  name     Json   @db.Json
  capacity Int    @db.UnsignedInt
  camp     Camp   @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "rooms_camp_id_foreign")
  beds     Bed[]

  @@map("rooms")
}

model Bed {
  id             String        @id @unique @db.Char(26)
  roomId         String        @map("room_id") @db.Char(26)
  registrationId String?       @unique(map: "beds_registration_id_unique") @db.Char(26)
  room           Room          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "beds_room_id_foreign")
  registration   Registration? @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "beds_registration_id_foreign")

  @@map("beds")
}

model Template {
  id     String @id @unique(map: "templates_id_unique") @db.Char(26)
  campId String @map("camp_id") @db.Char(26)
  /// [GenericObject]
  data   Json   @db.Json
  camp   Camp   @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "templates_camp_id_foreign")

  @@index([campId], map: "templates_camp_id_foreign")
  @@map("templates")
}

model Token {
  id          Int       @id @default(autoincrement())
  userId      String    @map("user_id") @db.Char(26)
  token       String    @db.Char(255)
  type        TokenType
  expiresAt   DateTime  @map("expires_at")
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model File {
  id              String        @id @unique(map: "files_id_unique") @db.Char(26)
  campId          String?       @map("camp_id") @db.Char(36) // Prisma does not support morth
  registrationId  String?       @map("registration_id") @db.Char(36) // Prisma does not support morth
  name            String
  originalName    String        @map("original_name")
  field           String?
  type            String
  size            Int           @map("access_level")
  accessLevel     String?
  storageLocation String        @map("storage_location")
  createdAt       DateTime      @default(now()) @map("created_at")
  camp            Camp?         @relation(fields: [campId], references: [id], onDelete: Cascade)
  registration    Registration? @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("files")
}

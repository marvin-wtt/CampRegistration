generator client {
  provider = "prisma-client-js"
}

// TODO This is a workaround due to https://github.com/prisma/prisma/issues/3219
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @unique(map: "users_id_unique") @default(ulid()) @db.Char(26)
  name             String    @db.VarChar(255)
  email            String    @unique(map: "users_email_unique") @db.VarChar(255)
  emailVerified    Boolean   @default(false) @map("email_verified")
  password         String    @db.VarChar(255)
  twoFactorEnabled Boolean   @default(false) @map("two_factor_enabled")
  totpSecret       String?   @map("totp_secret") @db.Char(32)
  role             Role      @default(USER)
  locale           String    @default("en-US") @db.VarChar(5)
  locked           Boolean   @default(false)
  lastSeen         DateTime? @map("last_seen")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  camps  CampManager[]
  tokens Token[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Camp {
  id              String    @id @unique(map: "camps_id_unique") @default(ulid()) @db.Char(26)
  active          Boolean
  public          Boolean
  /// ![Array<string>]
  countries       Json      @db.Json
  /// [StringOrTranslation]
  name            Json      @db.Json
  /// [StringOrTranslation]
  organizer       Json      @db.Json
  /// [StringOrTranslation]
  contactEmail    Json      @map("contact_email") @db.Json
  /// [NumberOrTranslation]
  maxParticipants Json      @map("max_participants") @db.Json
  /// [NumberOrTranslation]
  freePlaces      Json      @map("free_places") @db.Json
  minAge          Int       @map("min_age") @db.UnsignedInt
  maxAge          Int       @map("max_age") @db.UnsignedInt
  startAt         DateTime  @map("start_at") @db.DateTime(0)
  endAt           DateTime  @map("end_at") @db.DateTime(0)
  price           Float
  /// [StringOrTranslation]
  location        Json?     @db.Json
  /// [GenericObject]
  form            Json      @db.Json
  /// [GenericObject]
  themes          Json      @default("{}") @db.Json
  version         Int       @default(1) @db.UnsignedInt
  createdAt       DateTime? @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  campManager      CampManager[]
  registrations    Registration[]
  rooms            Room[]
  templates        TableTemplate[]
  messageTempaltes MessageTemplate[]
  files            File[]

  @@map("camps")
}

model CampManager {
  id           String    @id @unique(map: "camp_managers_id_unique") @default(ulid()) @db.Char(26)
  campId       String    @map("camp_id") @db.Char(26)
  userId       String?   @map("user_id") @db.Char(26)
  invitationId String?   @map("invitation_id") @db.Char(26)
  expiresAt    DateTime? @map("expires_at") @db.DateTime(0)

  camp       Camp        @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "camp_managers_camp_id_foreign")
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "camp_managers_user_id_foreign")
  invitation Invitation? @relation(fields: [invitationId], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "camp_managers_invitation_id_foreign")

  @@index([campId], map: "camp_managers_camp_id_foreign")
  @@index([userId], map: "camp_managers_user_id_foreign")
  @@index([invitationId], map: "camp_manager_invitation_id_foreign")
  @@map("camp_managers")
}

model Invitation {
  id          String        @id @unique(map: "invitations_id_unique") @default(ulid()) @db.Char(26)
  email       String        @db.VarChar(255)
  campManager CampManager[]

  @@map("camp_manager_invitations")
}

model Registration {
  id          String    @id @unique(map: "registrations_id_unique") @default(ulid()) @db.Char(26)
  campId      String    @map("camp_id") @db.Char(26)
  /// [GenericObject]
  data        Json      @db.Json
  /// [RegistrationCampData]
  campData    Json      @default("{}") @map("camp_data") @db.Json
  locale      String    @default("en-US") @db.VarChar(5)
  waitingList Boolean   @default(true) @map("waiting_list")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  camp     Camp                @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "registrations_camp_id_foreign")
  bed      Bed?
  files    File[]
  messages MessageReceipient[]

  @@map("registrations")
}

model Room {
  id     String @id @unique(map: "rooms_id_unique") @default(ulid()) @db.Char(26)
  campId String @map("camp_id") @db.Char(26)
  /// [StringOrTranslation]
  name   Json   @db.Json

  camp Camp  @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "rooms_camp_id_foreign")
  beds Bed[]

  @@map("rooms")
}

model Bed {
  id             String  @id @unique @default(ulid()) @db.Char(26)
  roomId         String  @map("room_id") @db.Char(26)
  registrationId String? @unique(map: "beds_registration_id_unique") @map("registration_id") @db.Char(26)

  room         Room          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "beds_room_id_foreign")
  registration Registration? @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "beds_registration_id_foreign")

  @@map("beds")
}

model TableTemplate {
  id     String @id @unique(map: "table_templates_id_unique") @default(ulid()) @db.Char(26)
  campId String @map("camp_id") @db.Char(26)
  /// [TableTemplates]
  data   Json   @db.Json

  camp Camp @relation(fields: [campId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "table_templates_camp_id_foreign")

  @@index([campId], map: "table_templates_camp_id_foreign")
  @@map("table_templates")
}

model Token {
  id          Int       @id @default(autoincrement())
  userId      String    @map("user_id") @db.Char(26)
  token       String    @db.Char(255)
  type        TokenType
  expiresAt   DateTime  @map("expires_at")
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
  OTP
}

model File {
  id              String   @id @unique(map: "files_id_unique") @default(ulid()) @db.Char(26)
  campId          String?  @map("camp_id") @db.Char(36) // Prisma does not support morth
  registrationId  String?  @map("registration_id") @db.Char(36) // Prisma does not support morth
  name            String
  originalName    String   @map("original_name")
  field           String?
  type            String
  size            Int
  accessLevel     String?  @map("access_level")
  storageLocation String   @map("storage_location")
  createdAt       DateTime @default(now()) @map("created_at")

  camp         Camp?         @relation(fields: [campId], references: [id], onDelete: Cascade)
  registration Registration? @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Message {
  id         String   @id @unique(map: "message_id_unique") @default(ulid()) @db.Char(26)
  templateId String?  @map("message_template_id") @db.Char(36)
  replyTo    String?  @map("reply_to")
  subject    String
  body       String
  priority   String   @default("normal")
  createdAt  DateTime @default(now()) @map("created_at")

  template    MessageTemplate?    @relation(fields: [templateId], references: [id], onDelete: SetNull)
  receipients MessageReceipient[]

  @@map("messages")
}

model MessageReceipient {
  id             String    @id @unique(map: "message_id_unique") @default(ulid()) @db.Char(26)
  messageId      String    @map("message_id") @db.Char(36)
  registrationId String    @map("registration_id") @db.Char(36)
  email          String
  subject        String
  body           String
  sentAt         DateTime? @map("sent_at")
  bouncedAt      DateTime? @map("bounced_at")
  deliveredAt    DateTime? @map("delivered_at")

  message      Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  registration Registration @relation(fields: [registrationId], references: [id])

  @@map("message_recipients")
}

model MessageTemplate {
  id        String   @id @unique(map: "message_template_id_unique") @default(ulid()) @db.Char(26)
  campId    String   @map("camp_id") @db.Char(36)
  name      String
  /// [StringOrTranslation]
  subject   Json
  /// [StringOrTranslation]
  body      Json
  priority  String   @default("normal")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  camp     Camp      @relation(fields: [campId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([campId, name])
  @@map("message_templates")
}
